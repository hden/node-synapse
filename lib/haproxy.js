// Generated by CoffeeScript 1.6.3
(function() {
  'use strict';
  var HAProxy, Q, debug, f, print, reload, _;

  _ = require('underscore');

  HAProxy = require('haproxy');

  debug = require('debug')('haproxy');

  Q = require('q');

  print = function(d) {
    var error;
    if (d == null) {
      return;
    }
    if (_.isString(d)) {
      return debug(d);
    } else {
      try {
        return debug(JSON.stringify(d));
      } catch (_error) {
        error = _error;
        return debug('circular structure!');
      }
    }
  };

  exports.start = function(options, done) {
    var haproxy, preset, terminate;
    if (options == null) {
      options = {};
    }
    if (_.isFunction(options)) {
      done = options;
      options = {};
    }
    preset = {
      pidFile: "" + __dirname + "/../haproxy.pid",
      config: "" + __dirname + "/../haproxy.config",
      discover: true
    };
    _.defaults(options, preset);
    haproxy = new HAProxy("" + __dirname + "/../haproxy.sock", options);
    terminate = function(msg) {
      print(msg);
      haproxy.stop();
      return process.exit();
    };
    process.on('SIGTERM', _.partial(terminate, 'SIGTERM'));
    process.on('SIGINT', _.partial(terminate, 'SIGINT'));
    return Q.ninvoke(haproxy, 'start').then(function() {
      return haproxy;
    });
  };

  f = function() {
    return haproxy.info(function(error, info) {
      print('info...');
      if (error != null) {
        print(error);
      }
      if (info != null) {
        return print(info);
      }
    });
  };

  reload = function() {
    return haproxy.reload(function(error) {
      print('reload');
      if (error != null) {
        return print(error);
      }
    });
  };

}).call(this);
